version: '3.8'

services:
  # PostgreSQL Database for user data
  postgres:
    image: postgres:16-alpine
    container_name: censuschat-postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - censuschat-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: censuschat-redis
    restart: always
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: redis-server --appendonly yes ${REDIS_PASSWORD:+--requirepass $REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - censuschat-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: censuschat-backend
    restart: always
    ports:
      - "${PORT:-3001}:${PORT:-3001}"
    env_file:
      - .env
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${PORT:-3001}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./data:/app/data
    networks:
      - censuschat-network
    command: npm run dev

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: censuschat-frontend
    restart: always
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:3001/api/v1}
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    networks:
      - censuschat-network
    command: npm run dev

  # pgAdmin for database management (optional)
  # To use: docker-compose --profile tools up
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: censuschat-pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@localhost}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - censuschat-network
    profiles:
      - tools

  # RedisInsight for Redis management (optional)
  # To use: docker-compose --profile tools up
  redisinsight:
    image: redislabs/redisinsight:latest
    container_name: censuschat-redisinsight
    restart: always
    ports:
      - "8001:8001"
    depends_on:
      - redis
    networks:
      - censuschat-network
    profiles:
      - tools

volumes:
  postgres_data:
  redis_data:

networks:
  censuschat-network:
    driver: bridge